generator client {
  provider = "prisma-client-js"
}

// generator jsonSchema {
//   provider = "prisma-json-schema-generator"
//   output   = "../generated/json-schema" // default: ./json-schema
// }

datasource db {
  provider = "sqlite"
  url      = "file:./main.db"
}

model Institution {
  id            String      @id @default(uuid())
  name          Translation @relation(fields: [translationId], references: [id])
  courses       Course[]
  translationId String
  Degree        Degree[]
  Faculty       Faculty[]

  @@map("University")
}

model Faculty {
  id            String      @id @default(uuid())
  name          Translation @relation("FacultyName", fields: [translationId], references: [id])
  description   Translation @relation("FacultyDescription", fields: [descriptionId], references: [id])
  descriptionId String
  translationId String
  institutionId String      @map("universityId")
  institution   Institution @relation(fields: [institutionId], references: [id])
  Degree        Degree[]

  @@unique([translationId, institutionId])
}

model Degree {
  id            String      @id @default(uuid())
  name          Translation @relation(fields: [translationId], references: [id])
  translationId String
  institutionId String      @map("universityId")
  institution   Institution @relation(fields: [institutionId], references: [id])
  courses       Course[]
  // Optional relation to a Faculty. When null, degree is not assigned to a specific faculty.
  facultyId     String?
  faculty       Faculty?    @relation(fields: [facultyId], references: [id])
}

model Course {
  id            String      @id @default(uuid())
  name          Translation @relation(fields: [translationId], references: [id])
  translationId String
  institutionId String      @map("universityId")
  institution   Institution @relation(fields: [institutionId], references: [id])
  modules       Module[]    @relation("CourseModules")
  publishedAt   DateTime?
  blockId       String
  Block         Block       @relation(fields: [blockId], references: [id])
  Degree        Degree[]

  @@unique([translationId, institutionId])
}

model Block {
  id              String              @id @default(uuid())
  prerequisiteFor BlockRelationship[] @relation("Prerequisites")
  postrequisiteOf BlockRelationship[] @relation("Postquisites")
  // Relations
  Module          Module[]
  Course          Course[]
}

model BlockRelationship {
  id              String                 @id @default(uuid())
  prerequisiteId  String
  postrequisiteId String
  prerequisite    Block                  @relation("Prerequisites", fields: [prerequisiteId], references: [id])
  postrequisite   Block                  @relation("Postquisites", fields: [postrequisiteId], references: [id])
  metadata        RelationshipMetadata[]

  @@unique([prerequisiteId, postrequisiteId])
}

enum RelationshipMetadataKey {
  // The reason for the relationship
  REASON
  // The type of the relationship (e.g., "hard", "soft")
  TYPE
  // A description of the relationship
  DESCRIPTION
}

model RelationshipMetadata {
  id                  String                  @id @default(uuid())
  key                 RelationshipMetadataKey
  value               String
  blockRelationshipId String
  blockRelationship   BlockRelationship       @relation(fields: [blockRelationshipId], references: [id])

  @@unique([key, blockRelationshipId])
}

model Module {
  id            String      @id @default(uuid())
  name          Translation @relation(fields: [translationId], references: [id])
  translationId String
  subModules    Module[]    @relation("ModuleHierarchy")
  parentModules Module[]    @relation("ModuleHierarchy")
  Course        Course[]    @relation("CourseModules")
  Questions     Question[]

  blockId String
  Block   Block  @relation(fields: [blockId], references: [id])
}

model Translation {
  id      String @id @default(uuid())
  // By ISO 639-1 standard
  en_text String
  he_text String

  // Relations
  Institution        Institution[]
  Course             Course[]
  Module             Module[]
  Question           Question[]
  Degree             Degree[]
  FacultyName        Faculty[]      @relation("FacultyName")
  FacultyDescription Faculty[]      @relation("FacultyDescription")
  SelectAnswer       SelectAnswer[]
}

enum QuestionType {
  selection
  value
  boolean
  // If a question can't be answered so its don't have element in the Answer array
  void
}

enum QuestionValidationStatus {
  ai_generated
  in_manual_review
  approved
  rejected
}

model Question {
  id               String                   @id @default(uuid())
  validationStatus QuestionValidationStatus @default(ai_generated)
  // Math will be represented in LaTeX format
  text             Translation              @relation(fields: [translationId], references: [id])
  translationId    String
  Answer           Answer[]
  type             QuestionType
  Modules          Module[]
  Parts            QuestionPart[]
  PartOf           QuestionPart[]           @relation("QuestionParts")
}

model QuestionPart {
  id             String   @id @default(uuid())
  questionId     String
  question       Question @relation(fields: [questionId], references: [id])
  partQuestionId String
  partQuestion   Question @relation("QuestionParts", fields: [partQuestionId], references: [id])
  order          Int

  @@unique([questionId, order])
}

model Answer {
  id            String          @id @default(uuid())
  questionId    String
  question      Question        @relation(fields: [questionId], references: [id])
  SelectAnswer  SelectAnswer[]
  UnitAnswer    UnitAnswer?
  NumberAnswer  NumberAnswer?
  BooleanAnswer BooleanAnswer?
}

model SelectAnswer {
  id            String      @id @default(uuid())
  isCorrect     Boolean
  text          Translation @relation(fields: [translationId], references: [id])
  translationId String
  answerId      String
  answer        Answer      @relation(fields: [answerId], references: [id])
}

model UnitAnswer {
  id       String @id @default(uuid())
  value    Float
  unit     Units
  answerId String @unique
  answer   Answer @relation(fields: [answerId], references: [id])
}

model NumberAnswer {
  id       String @id @default(uuid())
  value    Float
  answerId String @unique
  answer   Answer @relation(fields: [answerId], references: [id])
}

model BooleanAnswer {
  id       String  @id @default(uuid())
  value    Boolean // The correct answer (true or false)
  answerId String  @unique
  answer   Answer  @relation(fields: [answerId], references: [id])
}

// SI units 
enum Units {
  meter
  kilogram
  second
  ampere
  kelvin
  mole
  candela
}
