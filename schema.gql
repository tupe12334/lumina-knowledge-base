# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddCourseToDegreeInput {
  """ID of the course to add"""
  courseId: String!

  """ID of the degree to add the course to"""
  degreeId: String!
}

type Answer {
  BooleanAnswer: BooleanAnswer
  NumberAnswer: NumberAnswer
  SelectAnswer: [SelectAnswer!]
  UnitAnswer: UnitAnswer
  id: ID!
  questionId: String!
}

type Block {
  id: ID!
  modules: [Module!]
  postrequisiteOf: [BlockRelationship!]
  prerequisiteFor: [BlockRelationship!]
}

type BlockRelationship {
  id: ID!
  metadata: [RelationshipMetadata!]
  postrequisite: Block
  postrequisiteId: String!
  prerequisite: Block
  prerequisiteId: String!
}

type BlockRelationshipResult {
  """ID of the created/deleted relationship"""
  id: ID!

  """Metadata associated with the relationship (JSON string)"""
  metadata: String!

  """The postrequisite block"""
  postrequisite: Block!

  """The prerequisite block"""
  prerequisite: Block!
}

type BooleanAnswer {
  answerId: String!
  id: ID!
  value: Boolean!
}

type Course {
  Block: Block
  id: ID!
  modules: [Module!]
  name: Translation!
  publishedAt: DateTime
  university: University
  universityId: String!
}

type CourseRelationshipResult {
  """ID of the created/deleted relationship"""
  id: ID!

  """Metadata associated with the relationship (JSON string)"""
  metadata: String!

  """The postrequisite block"""
  postrequisite: Block!

  """The prerequisite block"""
  prerequisite: Block!
}

input CreateBlockInput {
  moduleId: String!
  name: String!
}

input CreateBlockRelationshipInput {
  """Optional metadata for the relationship (JSON string)"""
  metadata: String

  """The ID of the postrequisite block"""
  postrequisiteBlockId: ID!

  """The ID of the prerequisite block"""
  prerequisiteBlockId: ID!
}

input CreateCourseInput {
  name: String!
  universityId: String!
}

input CreateCourseRelationshipInput {
  """Optional metadata for the relationship (JSON string)"""
  metadata: String

  """The ID of the postrequisite course"""
  postrequisiteCourseId: ID!

  """The ID of the prerequisite course"""
  prerequisiteCourseId: ID!
}

input CreateDegreeInput {
  name: String!
  universityId: String!
}

input CreateFacultyInput {
  description: String!
  name: String!
  universityId: String!
}

input CreateManyBlocksInput {
  """Array of block data to create"""
  blocks: [CreateBlockInput!]!
}

input CreateManyCoursesInput {
  """Array of course data to create"""
  courses: [CreateCourseInput!]!
}

input CreateManyDegreesInput {
  """Array of degree data to create"""
  degrees: [CreateDegreeInput!]!
}

input CreateManyFacultiesInput {
  """Array of faculty data to create"""
  faculties: [CreateFacultyInput!]!
}

input CreateManyModulesInput {
  """Array of module data to create"""
  modules: [CreateModuleInput!]!
}

input CreateManyQuestionsInput {
  """Array of question data to create"""
  questions: [CreateQuestionInput!]!
}

type CreateManyResult {
  """The number of records created"""
  count: Int!
}

input CreateManyTranslationsInput {
  """Array of translation data to create"""
  translations: [CreateTranslationInput!]!
}

input CreateManyUniversitiesInput {
  """Array of university data to create"""
  universities: [CreateUniversityInput!]!
}

input CreateModuleInput {
  """ID of the course this module belongs to"""
  courseId: String!

  """English name of the module"""
  en_text: String!

  """Hebrew name of the module"""
  he_text: String!
}

input CreateModuleRelationshipInput {
  """Optional metadata for the relationship (JSON string)"""
  metadata: String

  """The ID of the postrequisite module"""
  postrequisiteModuleId: ID!

  """The ID of the prerequisite module"""
  prerequisiteModuleId: ID!
}

input CreateQuestionInput {
  """Optional list of module IDs this question belongs to"""
  moduleIds: [String!]

  """The ID of the translation for the question text"""
  translationId: String!

  """The type of the question"""
  type: QuestionType!
  validationStatus: QuestionValidationStatus! = ai_generated
}

input CreateTranslationInput {
  """English text"""
  en_text: String!

  """Hebrew text"""
  he_text: String!
}

input CreateUniversityInput {
  """English name of the university"""
  en_text: String!

  """Hebrew name of the university"""
  he_text: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Degree {
  courses: [Course!]
  faculty: Faculty
  facultyId: String
  id: ID!
  name: Translation!
  university: University
  universityId: String!
}

input DegreesQueryDto {
  facultyId: String
  name: String
  universityId: String
}

input DeleteBlockRelationshipInput {
  """The ID of the postrequisite block"""
  postrequisiteBlockId: ID!

  """The ID of the prerequisite block"""
  prerequisiteBlockId: ID!
}

"""Input for deleting a course and all its related data"""
input DeleteCourseInput {
  """The ID of the course to delete"""
  courseId: ID!

  """Force deletion and cleanup of all related data (default: true)"""
  force: Boolean! = true
}

input DeleteCourseRelationshipInput {
  """The ID of the postrequisite course"""
  postrequisiteCourseId: ID!

  """The ID of the prerequisite course"""
  prerequisiteCourseId: ID!
}

"""Result of a course deletion operation with cleanup details"""
type DeleteCourseResult {
  """The ID of the deleted course"""
  courseId: ID!

  """The name of the deleted course"""
  courseName: String!

  """Number of course relationships deleted"""
  deletedRelationships: Int!

  """Additional details about the deletion operation"""
  message: String

  """Number of orphaned modules"""
  orphanedModules: Int!

  """Number of orphaned questions"""
  orphanedQuestions: Int!

  """Whether the deletion was successful"""
  success: Boolean!
}

input DeleteModuleRelationshipInput {
  """The ID of the postrequisite module"""
  postrequisiteModuleId: ID!

  """The ID of the prerequisite module"""
  prerequisiteModuleId: ID!
}

input DeleteQuestionInput {
  id: String!
}

type Faculty {
  degrees: [Degree!]!
  description: Translation!
  id: ID!
  name: Translation!
}

type Module {
  Block: Block
  id: ID!
  name: Translation!
  parentModules: [Module!]
  questions(input: QuestionsQueryDto): [Question!]
  subModules: [Module!]
}

type ModuleRelationshipResult {
  """ID of the created/deleted relationship"""
  id: ID!

  """Metadata associated with the relationship (JSON string)"""
  metadata: String!

  """The postrequisite block"""
  postrequisite: Block!

  """The prerequisite block"""
  prerequisite: Block!
}

input ModulesQueryInput {
  """Filter modules by course ID"""
  courseId: ID

  """Filter modules by exact number of questions"""
  exactQuestions: Int

  """Filter modules with fewer than 20 questions"""
  fewQuestions: Boolean

  """Filter modules that have parent modules"""
  hasParentModules: Boolean

  """Filter modules that have postrequisites"""
  hasPostrequisites: Boolean

  """Filter modules that have prerequisites"""
  hasPrerequisites: Boolean

  """Filter modules that have questions"""
  hasQuestions: Boolean

  """Filter modules that have sub-modules"""
  hasSubModules: Boolean

  """Filter modules by maximum number of questions"""
  maxQuestions: Int

  """Filter modules by minimum number of questions"""
  minQuestions: Int

  """Search modules by name (partial match, case insensitive)"""
  nameSearch: String

  """Filter modules by university ID"""
  universityId: ID
}

type Mutation {
  """Adds a course to a degree"""
  addCourseToDegree(input: AddCourseToDegreeInput!): Degree!
  createBlock(createBlockInput: CreateBlockInput!): Block!

  """Create a prerequisite/postrequisite relationship between blocks"""
  createBlockRelationship(input: CreateBlockRelationshipInput!): BlockRelationshipResult!

  """Create a new course"""
  createCourse(createCourseInput: CreateCourseInput!): Course!

  """Create a prerequisite/postrequisite relationship between courses"""
  createCourseRelationship(input: CreateCourseRelationshipInput!): CourseRelationshipResult!
  createDegree(createDegreeInput: CreateDegreeInput!): Degree!
  createFaculty(createFacultyInput: CreateFacultyInput!): Faculty!

  """Create multiple blocks in bulk"""
  createManyBlocks(input: CreateManyBlocksInput!): CreateManyResult!

  """Create multiple courses in bulk"""
  createManyCourses(input: CreateManyCoursesInput!): CreateManyResult!

  """Create multiple degrees in bulk"""
  createManyDegrees(input: CreateManyDegreesInput!): CreateManyResult!

  """Create multiple faculties in bulk"""
  createManyFaculties(input: CreateManyFacultiesInput!): CreateManyResult!

  """Creates multiple modules in bulk"""
  createManyModules(input: CreateManyModulesInput!): CreateManyResult!

  """Create multiple questions in bulk"""
  createManyQuestions(input: CreateManyQuestionsInput!): CreateManyResult!

  """Create multiple translations in bulk"""
  createManyTranslations(input: CreateManyTranslationsInput!): CreateManyResult!

  """Creates multiple universities in bulk"""
  createManyUniversities(input: CreateManyUniversitiesInput!): CreateManyResult!

  """Creates a new module"""
  createModule(input: CreateModuleInput!): Module!

  """Create a prerequisite/postrequisite relationship between modules"""
  createModuleRelationship(input: CreateModuleRelationshipInput!): ModuleRelationshipResult!

  """Create a new question"""
  createQuestion(input: CreateQuestionInput!): Question!
  createTranslation(createTranslationInput: CreateTranslationInput!): Translation!

  """Creates a new university"""
  createUniversity(input: CreateUniversityInput!): University!

  """Delete a prerequisite/postrequisite relationship between blocks"""
  deleteBlockRelationship(input: DeleteBlockRelationshipInput!): BlockRelationshipResult!

  """Delete a course and clean up all related data from the database"""
  deleteCourse(input: DeleteCourseInput!): DeleteCourseResult!

  """Delete a prerequisite/postrequisite relationship between courses"""
  deleteCourseRelationship(input: DeleteCourseRelationshipInput!): CourseRelationshipResult!

  """Delete a prerequisite/postrequisite relationship between modules"""
  deleteModuleRelationship(input: DeleteModuleRelationshipInput!): ModuleRelationshipResult!

  """Delete a question"""
  deleteQuestion(input: DeleteQuestionInput!): Question!
  removeBlock(id: ID!): Block!
  removeDegree(id: ID!): Degree!
  removeFaculty(id: ID!): Faculty!
  removeModule(id: ID!): Module!
  removeTranslation(id: ID!): Translation!
  removeUniversity(id: ID!): University!

  """Replace a course's modules with the provided module IDs"""
  setCourseModules(input: SetCourseModulesInput!): Course!

  """
  Assign a faculty to a degree or clear the assignment when facultyId is null
  """
  setDegreeFaculty(input: SetDegreeFacultyInput!): Degree!
  updateBlock(updateBlockInput: UpdateBlockInput!): Block!

  """
  Update a course's fields (e.g., name translation, university, publishedAt)
  """
  updateCourse(input: UpdateCourseInput!): Course!
  updateDegree(updateDegreeInput: UpdateDegreeInput!): Degree!
  updateFaculty(updateFacultyInput: UpdateFacultyInput!): Faculty!
  updateModule(updateModuleInput: UpdateModuleInput!): Module!

  """Update an existing question"""
  updateQuestion(input: UpdateQuestionInput!): Question!
  updateTranslation(updateTranslationInput: UpdateTranslationInput!): Translation!
  updateUniversity(updateUniversityInput: UpdateUniversityInput!): University!
}

type NumberAnswer {
  answerId: String!
  id: ID!
  value: Float!
}

type PaginatedQuestionsResponse {
  """Whether there are more questions available"""
  hasMore: Boolean!

  """Number of questions returned in this batch"""
  limit: Int!

  """Current offset (starting position)"""
  offset: Int!

  """List of questions"""
  questions: [Question!]!

  """Total number of questions matching the criteria"""
  totalCount: Int!
}

type Query {
  """Get a specific block by ID"""
  block(
    """Block ID"""
    id: ID!
  ): Block
  blocks: [Block!]!

  """Get a specific course by ID"""
  course(
    """Course ID"""
    id: ID!
  ): Course

  """Get all courses"""
  courses: [Course!]!

  """Get a specific degree by ID"""
  degree(
    """Degree ID"""
    id: ID!
  ): Degree

  """Get all degrees with optional filtering"""
  degrees(query: DegreesQueryDto): [Degree!]!
  faculties: [Faculty!]!

  """Get faculties by university ID"""
  facultiesByUniversity(
    """University ID"""
    universityId: ID!
  ): [Faculty!]!

  """Get a specific faculty by ID"""
  faculty(
    """Faculty ID"""
    id: ID!
  ): Faculty

  """Get a specific module by ID"""
  module(
    """Module ID"""
    id: ID!
  ): Module

  """Get all modules with optional filtering"""
  modules(input: ModulesQueryInput): [Module!]!

  """Get a specific question by ID"""
  question(
    """Question ID"""
    id: ID!
  ): Question

  """Get all questions with optional filtering"""
  questions(input: QuestionsQueryDto): [Question!]!

  """Get questions with pagination support for infinite scroll"""
  questionsPaginated(input: QuestionsQueryDto): PaginatedQuestionsResponse!
  translation(id: ID!): Translation
  translations: [Translation!]!
  universities: [University!]!
  university(id: ID!): University
}

type Question {
  Answer: [Answer!]
  Modules: [Module!]
  PartOf: [QuestionPart!]
  Parts: [QuestionPart!]
  id: String!
  text: Translation!
  translationId: String!
  type: QuestionType!
  validationStatus: QuestionValidationStatus!
}

type QuestionPart {
  id: String!
  order: Int!
  partQuestionId: String!
  questionId: String!
}

"""The type of the question"""
enum QuestionType {
  boolean
  selection
  value
  void
}

"""The validation status of the question"""
enum QuestionValidationStatus {
  ai_generated
  approved
  in_manual_review
  rejected
}

input QuestionsQueryDto {
  """Filter by course ID"""
  courseId: ID

  """Filter by multiple course IDs"""
  courseIds: [ID!]

  """Filter questions that have parts"""
  hasParts: Boolean
  id: ID

  """Filter by specific question IDs"""
  ids: [ID!]

  """Include submodules when filtering by module ID"""
  includeSubmodules: Boolean = true

  """Number of records to return (max 100)"""
  limit: Int = 20

  """Filter by module ID"""
  moduleId: ID

  """Filter by multiple module IDs"""
  moduleIds: [ID!]

  """Number of records to skip for pagination"""
  offset: Int = 0

  """Filter by question type"""
  questionType: QuestionType

  """Filter by multiple question types"""
  questionTypes: [QuestionType!]

  """Search in question text"""
  textSearch: String
  type: QuestionType
  validationStatus: QuestionValidationStatus
}

type RelationshipMetadata {
  blockRelationshipId: String!
  id: ID!
  key: RelationshipMetadataKey!
  value: String!
}

enum RelationshipMetadataKey {
  DESCRIPTION
  REASON
  TYPE
}

type SelectAnswer {
  answerId: String!
  id: ID!
  isCorrect: Boolean!
  text: Translation!
  translationId: String!
}

input SetCourseModulesInput {
  """Course ID"""
  courseId: ID!

  """List of module IDs to assign to the course (replaces existing)"""
  moduleIds: [ID!]!
}

input SetDegreeFacultyInput {
  """Degree ID"""
  degreeId: ID!

  """Faculty ID to assign. If null, clears the faculty assignment."""
  facultyId: ID
}

type Translation {
  en_text: String!
  he_text: String!
  id: String!
}

type UnitAnswer {
  answerId: String!
  id: ID!
  unit: String!
  value: Float!
}

type University {
  courses: [Course!]
  degrees: [Degree!]
  id: ID!
  name: Translation!
}

input UpdateBlockInput {
  id: String!
  moduleId: String
  name: String
}

input UpdateCourseInput {
  """Course ID"""
  courseId: ID!

  """English name text"""
  enText: String

  """Hebrew name text"""
  heText: String

  """Published at timestamp (UTC)"""
  publishedAt: DateTime

  """University ID of the course"""
  universityId: String
}

input UpdateDegreeInput {
  id: String!
  name: String
  universityId: String
}

input UpdateFacultyInput {
  description: String
  id: String!
  name: String
  universityId: String
}

input UpdateModuleInput {
  """ID of the course this module belongs to"""
  courseId: String

  """English name of the module"""
  en_text: String

  """Hebrew name of the module"""
  he_text: String
  id: String!
}

input UpdateQuestionInput {
  id: String!

  """Optional list of module IDs this question belongs to"""
  moduleIds: [String!]

  """The ID of the translation for the question text"""
  translationId: String

  """The type of the question"""
  type: QuestionType
  validationStatus: QuestionValidationStatus = ai_generated
}

input UpdateTranslationInput {
  """English text"""
  en_text: String

  """Hebrew text"""
  he_text: String

  """Translation ID"""
  id: ID!
}

input UpdateUniversityInput {
  """English name of the university"""
  en_text: String

  """Hebrew name of the university"""
  he_text: String
  id: String!
}