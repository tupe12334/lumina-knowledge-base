# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Answer {
  NumberAnswer: NumberAnswer
  SelectAnswer: [SelectAnswer!]
  UnitAnswer: UnitAnswer
  id: ID!
  questionId: String!
}

type Block {
  id: ID!
  modules: [Module!]
  postrequisiteOf: [BlockRelationship!]
  prerequisiteFor: [BlockRelationship!]
}

type BlockRelationship {
  id: ID!
  metadata: [RelationshipMetadata!]
  postrequisite: Block
  postrequisiteId: String!
  prerequisite: Block
  prerequisiteId: String!
}

type Course {
  Block: Block
  id: ID!
  modules: [Module!]
  name: Translation!
  publishedAt: DateTime
  university: University
  universityId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Degree {
  courses: [Course!]
  createdAt: DateTime!
  id: ID!
  name: Translation!
  university: University
  universityId: String!
  updatedAt: DateTime!
}

input DegreesQueryDto {
  name: String
}

type Faculty {
  description: Translation!
  id: ID!
  name: Translation!
}

type LearningResource {
  createdAt: DateTime!
  id: ID!
  language: String!
  moduleId: String!
  relevance: Int!
  suggestedBy: String
  type: LearningResourceType!
  updatedAt: DateTime!
  url: String!
}

enum LearningResourceType {
  video
}

type Module {
  Block: Block
  LearningResource: [LearningResource!]
  id: ID!
  name: Translation!
  parentModules: [Module!]
  subModules: [Module!]
}

input ModulesQueryInput {
  """Filter modules by exact number of questions"""
  exactQuestions: Int

  """Filter modules by maximum number of questions"""
  maxQuestions: Int

  """Filter modules by minimum number of questions"""
  minQuestions: Int
}

type NumberAnswer {
  answerId: String!
  id: ID!
  value: Float!
}

type Query {
  """Get a specific block by ID"""
  block(
    """Block ID"""
    id: ID!
  ): Block

  """Get a specific course by ID"""
  course(
    """Course ID"""
    id: ID!
  ): Course

  """Get all courses"""
  courses: [Course!]!

  """Get a specific degree by ID"""
  degree(
    """Degree ID"""
    id: ID!
  ): Degree

  """Get all degrees with optional filtering"""
  degrees(query: DegreesQueryDto): [Degree!]!

  """Get degrees by university ID"""
  degreesByUniversity(
    """University ID"""
    universityId: ID!
  ): [Degree!]!

  """Get faculties by university ID"""
  facultiesByUniversity(
    """University ID"""
    universityId: ID!
  ): [Faculty!]!

  """Get a specific faculty by ID"""
  faculty(
    """Faculty ID"""
    id: ID!
  ): Faculty
  hello: String!

  """Get a specific learning resource by ID"""
  learningResource(
    """Learning Resource ID"""
    id: ID!
  ): LearningResource

  """Get all learning resources"""
  learningResources: [LearningResource!]!

  """Get learning resources by module ID"""
  learningResourcesByModule(
    """Module ID"""
    moduleId: ID!
  ): [LearningResource!]!

  """Get a specific module by ID"""
  module(
    """Module ID"""
    id: ID!
  ): Module

  """Get all modules with optional filtering"""
  modules(input: ModulesQueryInput): [Module!]!

  """Get a specific question by ID"""
  question(
    """Question ID"""
    id: ID!
  ): Question

  """Get all questions with optional filtering"""
  questions(input: QuestionsQueryInput): [Question!]!
  universities: [University!]!
  university(id: ID!): University
}

type Question {
  answers: [Answer!]
  id: ID!
  modules: [Module!]
  parts: [QuestionPart!]
  text: Translation!
}

type QuestionPart {
  id: ID!
  order: Int!
  partQuestion: Question!
}

"""The type of question"""
enum QuestionType {
  SELECTION
  VALUE
  VOID
}

input QuestionsQueryInput {
  """Filter questions by course ID (deprecated, use courseIds)"""
  courseId: String

  """Filter questions by course IDs"""
  courseIds: [String!]

  """Filter questions by module ID (deprecated, use moduleIds)"""
  moduleId: String

  """Filter questions by module IDs"""
  moduleIds: [String!]

  """Filter questions by question type (deprecated, use questionTypes)"""
  questionType: QuestionType

  """Filter questions by question types"""
  questionTypes: [QuestionType!]
}

type RelationshipMetadata {
  blockRelationshipId: String!
  id: ID!
  key: RelationshipMetadataKey!
  value: String!
}

enum RelationshipMetadataKey {
  DESCRIPTION
  REASON
  TYPE
}

type SelectAnswer {
  answerId: String!
  id: ID!
  isCorrect: Boolean!
  text: Translation!
  translationId: String!
}

type Translation {
  en_text: String!
  he_text: String!
}

type UnitAnswer {
  answerId: String!
  id: ID!
  unit: String!
  value: Float!
}

type University {
  courses: [Course!]
  degrees: [Degree!]
  id: ID!
  name: Translation!
}