# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Answer {
  NumberAnswer: NumberAnswer
  SelectAnswer: [SelectAnswer!]
  UnitAnswer: UnitAnswer
  id: ID!
  questionId: String!
}

type Block {
  id: ID!
  modules: [Module!]
  postrequisiteOf: [BlockRelationship!]
  prerequisiteFor: [BlockRelationship!]
}

type BlockRelationship {
  id: ID!
  metadata: [RelationshipMetadata!]
  postrequisite: Block
  postrequisiteId: String!
  prerequisite: Block
  prerequisiteId: String!
}

type Course {
  Block: Block
  discipline: Discipline
  disciplineId: String!
  id: ID!
  modules: [Module!]
  name: Translation!
  publishedAt: DateTime
  university: University
  universityId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Degree {
  courses: [Course!]
  createdAt: DateTime!
  id: ID!
  name: Translation!
  university: University
  universityId: String!
  updatedAt: DateTime!
}

type Discipline {
  courses: [Course!]
  id: ID!
  name: Translation!
}

type LearningResource {
  createdAt: DateTime!
  id: ID!
  moduleId: String!
  relevance: Int!
  suggestedBy: String
  type: LearningResourceType!
  updatedAt: DateTime!
  url: String!
}

enum LearningResourceType {
  video
}

type Module {
  Block: Block
  LearningResource: [LearningResource!]
  id: ID!
  name: Translation!
  parentModules: [Module!]
  subModules: [Module!]
}

type NumberAnswer {
  answerId: String!
  id: ID!
  value: Float!
}

type Query {
  hello: String!
  question(id: ID!): Question
  questions(input: QuestionsQueryInput): [Question!]!
  universities: [University!]!
  university(id: ID!): University
}

type Question {
  answers: [Answer!]
  id: ID!
  modules: [Module!]
  parts: [QuestionPart!]
  text: Translation!
}

type QuestionPart {
  id: ID!
  order: Int!
  partQuestion: Question!
}

"""The type of question"""
enum QuestionType {
  SELECTION
  VALUE
  VOID
}

input QuestionsQueryInput {
  """Filter questions by course ID (deprecated, use courseIds)"""
  courseId: String

  """Filter questions by course IDs"""
  courseIds: [String!]

  """Exclude questions that are part of other questions"""
  excludePartQuestions: Boolean

  """Filter questions by module ID (deprecated, use moduleIds)"""
  moduleId: String

  """Filter questions by module IDs"""
  moduleIds: [String!]

  """Filter questions by question type (deprecated, use questionTypes)"""
  questionType: QuestionType

  """Filter questions by question types"""
  questionTypes: [QuestionType!]
}

type RelationshipMetadata {
  blockRelationshipId: String!
  id: ID!
  key: RelationshipMetadataKey!
  value: String!
}

enum RelationshipMetadataKey {
  DESCRIPTION
  REASON
  TYPE
}

type SelectAnswer {
  answerId: String!
  id: ID!
  isCorrect: Boolean!
  text: Translation!
  translationId: String!
}

type Translation {
  en_text: String!
  he_text: String!
}

type UnitAnswer {
  answerId: String!
  id: ID!
  unit: String!
  value: Float!
}

type University {
  courses: [Course!]
  degrees: [Degree!]
  id: ID!
  name: Translation!
}